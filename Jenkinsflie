pipeline {
    agent any

    environment {
        // Docker Registry 정보
        DOCKER_REGISTRY = "your-registry.com"
        IMAGE_NAME      = "your-image-name"
    }

    stages {
        stage('Checkout') {
            steps {
                // Git 플러그인을 이용한 저장소 체크아웃
                git branch: 'main', url: 'https://github.com/your-org/your-repo.git'
            }
        }
        stage('Test') {
            steps {
                // 예시: Maven 테스트 실행 (프로젝트에 맞게 수정)
                sh 'mvn clean test'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Docker Pipeline Plugin의 docker.build 사용 (빌드 시, Jenkins 노드에 Docker 설치 필수)
                    dockerImage = docker.build("${DOCKER_REGISTRY}/${IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // docker-credentials-id: Jenkins에 미리 등록된 Docker Registry 인증정보 ID
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-credentials-id') {
                        dockerImage.push("${env.BUILD_ID}")
                        dockerImage.push("latest")
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                // Kubernetes CLI Plugin을 사용하면 withKubeConfig 스텝을 활용하여 kubeconfig와 연동한 상태로 kubectl 명령 실행 가능
                withKubeConfig([credentialsId: 'kube-credentials-id', serverUrl: 'https://your-k8s-api-server']) {
                    // Deployment의 컨테이너 이미지를 업데이트한 후 롤아웃 상태 확인
                    sh "kubectl set image deployment/your-deployment your-container=${DOCKER_REGISTRY}/${IMAGE_NAME}:${env.BUILD_ID} --record"
                    sh "kubectl rollout status deployment/your-deployment"
                }
            }
        }
    }
    
    post {
        always {
            echo "CI/CD 파이프라인 완료"
        }
    }
}
